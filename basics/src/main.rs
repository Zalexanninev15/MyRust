use std::io; // –ò–º–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ stdin –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞

fn main() {
    // mut - –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å
    // String
    let lang = "Rust"; // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ string
    let mut text = String::from("Max"); // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ string
    text = "1".parse().unwrap(); // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    print!("{}", text); // –û–±—ã—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    println!("Hello world, {}", lang); // –í–≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞, –ø–æ—Ç–æ–º —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏

    // Int64
    let age: i64 = 23; 
    println!("My age is {}", age);

    // Float
    let float: f64 = 134.65;
    println!("Number is {}", float);

    // Char
    let symbol: char = 'c';
    let smile: char = 'ü§î';
    println!("Char {} is char {}", symbol, smile);

    // Bool
    let ll_t: bool = true;
    let ll_f: bool = false;
    println!("{} - {}", ll_t, ll_f);

    // –õ–æ–≥–∏–∫–∞
    let is_true: bool = true;
    let num = if is_true {
        1
    } else {
        0
    };
    println!("{}", num);

    // –†–∞–±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
    // let lol = String::from(funct());
    // println!("{}", lol);

    // –†–∞–±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π i64
    let result = funct_sum(4, 9);
    println!("{}", result);

    // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    let mut num = 0;
    loop {
        println!("{}", num);
        num += 1;
        if num == 100 { break; }
    }

    // –¶–∏–∫–ª
    let mut counter = 0;
    while counter < 10 {
        println!("Counter is {}", counter);
        counter += 1;
    }

    // For
    for i in 0..101 { // >= 0 and < 101
        if i % 2 == 0 { // –î–µ–ª–µ–Ω–∏–µ –Ω–∞—Ü–µ–ª–æ, –æ—Å—Ç–∞—Ç–æ–∫ == 0
            println!("{}", i)
        }
    }

    // Switch
    let num = 24;
    match num {
        10 => println!("Num is 10!"),
        23 => { 
            println!("Num is 45!");
            println!("OK!"); 
        },
        10..=50 => { // —á–∏—Å–ª–æ –º–µ–∂–¥—É 10 –∏ 50
            println!("–ß–∏—Å–ª–æ –º–µ–∂–¥—É 10 –∏ 50");
        },
        _ => { // _ - –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –Ω–µ –≤–µ—Ä–Ω–æ
            println!("–¢–∞–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç!");
        }
    };

    // Switch —Å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ–º
    let numx = 3;
    let num = match numx {
        2 => 1,
        3 => 10,
        3..=10 => 7,
        _ => 0
    };
    println!("{}", num);

    // –í–≤–æ–¥
    let mut name = String::new();
    println!("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∏–º—è: ");
    match io::stdin().read_line(&mut name) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
        Ok(_) => { // –ú–æ–∂–Ω–æ —Ç–∞–∫ Ok(_) => { }, 
            println!("–ü—Ä–∏–≤–µ—Ç, {}", name)
        },
        Err(e) => {
            println!("–û—à–∏–±–∫–∞!");
        }
    }
    io::stdin().read_line(&mut name).unwrap();
}

fn funct()
-> &'static str {
    // println!("LoL");
    "LoL"
}

fn funct_sum(x: i64, y: i64) 
-> i64 {
    x + y
}
